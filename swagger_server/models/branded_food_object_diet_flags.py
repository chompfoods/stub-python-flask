# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BrandedFoodObjectDietFlags(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ingredient: str=None, ingredient_description: str=None, diet_label: str=None, is_compatible: str=None, compatibility_level: int=None, compatibility_description: str=None, is_allergen: bool=None):  # noqa: E501
        """BrandedFoodObjectDietFlags - a model defined in Swagger

        :param ingredient: The ingredient of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type ingredient: str
        :param ingredient_description: The ingredient_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type ingredient_description: str
        :param diet_label: The diet_label of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type diet_label: str
        :param is_compatible: The is_compatible of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type is_compatible: str
        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type compatibility_level: int
        :param compatibility_description: The compatibility_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type compatibility_description: str
        :param is_allergen: The is_allergen of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type is_allergen: bool
        """
        self.swagger_types = {
            'ingredient': str,
            'ingredient_description': str,
            'diet_label': str,
            'is_compatible': str,
            'compatibility_level': int,
            'compatibility_description': str,
            'is_allergen': bool
        }

        self.attribute_map = {
            'ingredient': 'ingredient',
            'ingredient_description': 'ingredient_description',
            'diet_label': 'diet_label',
            'is_compatible': 'is_compatible',
            'compatibility_level': 'compatibility_level',
            'compatibility_description': 'compatibility_description',
            'is_allergen': 'is_allergen'
        }
        self._ingredient = ingredient
        self._ingredient_description = ingredient_description
        self._diet_label = diet_label
        self._is_compatible = is_compatible
        self._compatibility_level = compatibility_level
        self._compatibility_description = compatibility_description
        self._is_allergen = is_allergen

    @classmethod
    def from_dict(cls, dikt) -> 'BrandedFoodObjectDietFlags':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BrandedFoodObject_diet_flags of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: BrandedFoodObjectDietFlags
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredient(self) -> str:
        """Gets the ingredient of this BrandedFoodObjectDietFlags.

        Ingredient name  # noqa: E501

        :return: The ingredient of this BrandedFoodObjectDietFlags.
        :rtype: str
        """
        return self._ingredient

    @ingredient.setter
    def ingredient(self, ingredient: str):
        """Sets the ingredient of this BrandedFoodObjectDietFlags.

        Ingredient name  # noqa: E501

        :param ingredient: The ingredient of this BrandedFoodObjectDietFlags.
        :type ingredient: str
        """

        self._ingredient = ingredient

    @property
    def ingredient_description(self) -> str:
        """Gets the ingredient_description of this BrandedFoodObjectDietFlags.

        Description of the ingredient  # noqa: E501

        :return: The ingredient_description of this BrandedFoodObjectDietFlags.
        :rtype: str
        """
        return self._ingredient_description

    @ingredient_description.setter
    def ingredient_description(self, ingredient_description: str):
        """Sets the ingredient_description of this BrandedFoodObjectDietFlags.

        Description of the ingredient  # noqa: E501

        :param ingredient_description: The ingredient_description of this BrandedFoodObjectDietFlags.
        :type ingredient_description: str
        """

        self._ingredient_description = ingredient_description

    @property
    def diet_label(self) -> str:
        """Gets the diet_label of this BrandedFoodObjectDietFlags.

        Name of the diet with which this ingredient may not be compatible  # noqa: E501

        :return: The diet_label of this BrandedFoodObjectDietFlags.
        :rtype: str
        """
        return self._diet_label

    @diet_label.setter
    def diet_label(self, diet_label: str):
        """Sets the diet_label of this BrandedFoodObjectDietFlags.

        Name of the diet with which this ingredient may not be compatible  # noqa: E501

        :param diet_label: The diet_label of this BrandedFoodObjectDietFlags.
        :type diet_label: str
        """

        self._diet_label = diet_label

    @property
    def is_compatible(self) -> str:
        """Gets the is_compatible of this BrandedFoodObjectDietFlags.

        A description of if we believe this ingredient is compatible with the diet  # noqa: E501

        :return: The is_compatible of this BrandedFoodObjectDietFlags.
        :rtype: str
        """
        return self._is_compatible

    @is_compatible.setter
    def is_compatible(self, is_compatible: str):
        """Sets the is_compatible of this BrandedFoodObjectDietFlags.

        A description of if we believe this ingredient is compatible with the diet  # noqa: E501

        :param is_compatible: The is_compatible of this BrandedFoodObjectDietFlags.
        :type is_compatible: str
        """

        self._is_compatible = is_compatible

    @property
    def compatibility_level(self) -> int:
        """Gets the compatibility_level of this BrandedFoodObjectDietFlags.

        A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility  # noqa: E501

        :return: The compatibility_level of this BrandedFoodObjectDietFlags.
        :rtype: int
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level: int):
        """Sets the compatibility_level of this BrandedFoodObjectDietFlags.

        A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility  # noqa: E501

        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietFlags.
        :type compatibility_level: int
        """

        self._compatibility_level = compatibility_level

    @property
    def compatibility_description(self) -> str:
        """Gets the compatibility_description of this BrandedFoodObjectDietFlags.

        A description of how we graded this ingredient for compatibility with the diet  # noqa: E501

        :return: The compatibility_description of this BrandedFoodObjectDietFlags.
        :rtype: str
        """
        return self._compatibility_description

    @compatibility_description.setter
    def compatibility_description(self, compatibility_description: str):
        """Sets the compatibility_description of this BrandedFoodObjectDietFlags.

        A description of how we graded this ingredient for compatibility with the diet  # noqa: E501

        :param compatibility_description: The compatibility_description of this BrandedFoodObjectDietFlags.
        :type compatibility_description: str
        """

        self._compatibility_description = compatibility_description

    @property
    def is_allergen(self) -> bool:
        """Gets the is_allergen of this BrandedFoodObjectDietFlags.

        Boolean representing if the ingredient is a known allergen  # noqa: E501

        :return: The is_allergen of this BrandedFoodObjectDietFlags.
        :rtype: bool
        """
        return self._is_allergen

    @is_allergen.setter
    def is_allergen(self, is_allergen: bool):
        """Sets the is_allergen of this BrandedFoodObjectDietFlags.

        Boolean representing if the ingredient is a known allergen  # noqa: E501

        :param is_allergen: The is_allergen of this BrandedFoodObjectDietFlags.
        :type is_allergen: bool
        """

        self._is_allergen = is_allergen
