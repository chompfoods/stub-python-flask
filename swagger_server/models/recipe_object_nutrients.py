# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.recipe_object_nutrients_calories import RecipeObjectNutrientsCalories  # noqa: F401,E501
from swagger_server import util


class RecipeObjectNutrients(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, calories: List[RecipeObjectNutrientsCalories]=None, daily_values: List[RecipeObjectNutrientsCalories]=None, fat: List[RecipeObjectNutrientsCalories]=None, carbs: List[RecipeObjectNutrientsCalories]=None, vitamins: List[RecipeObjectNutrientsCalories]=None):  # noqa: E501
        """RecipeObjectNutrients - a model defined in Swagger

        :param calories: The calories of this RecipeObjectNutrients.  # noqa: E501
        :type calories: List[RecipeObjectNutrientsCalories]
        :param daily_values: The daily_values of this RecipeObjectNutrients.  # noqa: E501
        :type daily_values: List[RecipeObjectNutrientsCalories]
        :param fat: The fat of this RecipeObjectNutrients.  # noqa: E501
        :type fat: List[RecipeObjectNutrientsCalories]
        :param carbs: The carbs of this RecipeObjectNutrients.  # noqa: E501
        :type carbs: List[RecipeObjectNutrientsCalories]
        :param vitamins: The vitamins of this RecipeObjectNutrients.  # noqa: E501
        :type vitamins: List[RecipeObjectNutrientsCalories]
        """
        self.swagger_types = {
            'calories': List[RecipeObjectNutrientsCalories],
            'daily_values': List[RecipeObjectNutrientsCalories],
            'fat': List[RecipeObjectNutrientsCalories],
            'carbs': List[RecipeObjectNutrientsCalories],
            'vitamins': List[RecipeObjectNutrientsCalories]
        }

        self.attribute_map = {
            'calories': 'calories',
            'daily_values': 'daily_values',
            'fat': 'fat',
            'carbs': 'carbs',
            'vitamins': 'vitamins'
        }
        self._calories = calories
        self._daily_values = daily_values
        self._fat = fat
        self._carbs = carbs
        self._vitamins = vitamins

    @classmethod
    def from_dict(cls, dikt) -> 'RecipeObjectNutrients':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecipeObject_nutrients of this RecipeObjectNutrients.  # noqa: E501
        :rtype: RecipeObjectNutrients
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self) -> List[RecipeObjectNutrientsCalories]:
        """Gets the calories of this RecipeObjectNutrients.

        An array containing information for calories found in this recipe  # noqa: E501

        :return: The calories of this RecipeObjectNutrients.
        :rtype: List[RecipeObjectNutrientsCalories]
        """
        return self._calories

    @calories.setter
    def calories(self, calories: List[RecipeObjectNutrientsCalories]):
        """Sets the calories of this RecipeObjectNutrients.

        An array containing information for calories found in this recipe  # noqa: E501

        :param calories: The calories of this RecipeObjectNutrients.
        :type calories: List[RecipeObjectNutrientsCalories]
        """

        self._calories = calories

    @property
    def daily_values(self) -> List[RecipeObjectNutrientsCalories]:
        """Gets the daily_values of this RecipeObjectNutrients.

        An array containing information for this recipe's daily recommended value of certain nutrients  # noqa: E501

        :return: The daily_values of this RecipeObjectNutrients.
        :rtype: List[RecipeObjectNutrientsCalories]
        """
        return self._daily_values

    @daily_values.setter
    def daily_values(self, daily_values: List[RecipeObjectNutrientsCalories]):
        """Sets the daily_values of this RecipeObjectNutrients.

        An array containing information for this recipe's daily recommended value of certain nutrients  # noqa: E501

        :param daily_values: The daily_values of this RecipeObjectNutrients.
        :type daily_values: List[RecipeObjectNutrientsCalories]
        """

        self._daily_values = daily_values

    @property
    def fat(self) -> List[RecipeObjectNutrientsCalories]:
        """Gets the fat of this RecipeObjectNutrients.

        An array containing information for fat found in this recipe  # noqa: E501

        :return: The fat of this RecipeObjectNutrients.
        :rtype: List[RecipeObjectNutrientsCalories]
        """
        return self._fat

    @fat.setter
    def fat(self, fat: List[RecipeObjectNutrientsCalories]):
        """Sets the fat of this RecipeObjectNutrients.

        An array containing information for fat found in this recipe  # noqa: E501

        :param fat: The fat of this RecipeObjectNutrients.
        :type fat: List[RecipeObjectNutrientsCalories]
        """

        self._fat = fat

    @property
    def carbs(self) -> List[RecipeObjectNutrientsCalories]:
        """Gets the carbs of this RecipeObjectNutrients.

        An array containing information for carbs found in this recipe  # noqa: E501

        :return: The carbs of this RecipeObjectNutrients.
        :rtype: List[RecipeObjectNutrientsCalories]
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs: List[RecipeObjectNutrientsCalories]):
        """Sets the carbs of this RecipeObjectNutrients.

        An array containing information for carbs found in this recipe  # noqa: E501

        :param carbs: The carbs of this RecipeObjectNutrients.
        :type carbs: List[RecipeObjectNutrientsCalories]
        """

        self._carbs = carbs

    @property
    def vitamins(self) -> List[RecipeObjectNutrientsCalories]:
        """Gets the vitamins of this RecipeObjectNutrients.

        An array containing information for vitamins found in this recipe  # noqa: E501

        :return: The vitamins of this RecipeObjectNutrients.
        :rtype: List[RecipeObjectNutrientsCalories]
        """
        return self._vitamins

    @vitamins.setter
    def vitamins(self, vitamins: List[RecipeObjectNutrientsCalories]):
        """Sets the vitamins of this RecipeObjectNutrients.

        An array containing information for vitamins found in this recipe  # noqa: E501

        :param vitamins: The vitamins of this RecipeObjectNutrients.
        :type vitamins: List[RecipeObjectNutrientsCalories]
        """

        self._vitamins = vitamins
