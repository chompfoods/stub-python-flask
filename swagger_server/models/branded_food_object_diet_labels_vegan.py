# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BrandedFoodObjectDietLabelsVegan(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, is_compatible: bool=None, compatibility_level: int=None, confidence: int=None, confidence_description: str=None):  # noqa: E501
        """BrandedFoodObjectDietLabelsVegan - a model defined in Swagger

        :param name: The name of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type name: str
        :param is_compatible: The is_compatible of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type is_compatible: bool
        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type compatibility_level: int
        :param confidence: The confidence of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type confidence: int
        :param confidence_description: The confidence_description of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type confidence_description: str
        """
        self.swagger_types = {
            'name': str,
            'is_compatible': bool,
            'compatibility_level': int,
            'confidence': int,
            'confidence_description': str
        }

        self.attribute_map = {
            'name': 'name',
            'is_compatible': 'is_compatible',
            'compatibility_level': 'compatibility_level',
            'confidence': 'confidence',
            'confidence_description': 'confidence_description'
        }
        self._name = name
        self._is_compatible = is_compatible
        self._compatibility_level = compatibility_level
        self._confidence = confidence
        self._confidence_description = confidence_description

    @classmethod
    def from_dict(cls, dikt) -> 'BrandedFoodObjectDietLabelsVegan':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BrandedFoodObject_diet_labels_vegan of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: BrandedFoodObjectDietLabelsVegan
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this BrandedFoodObjectDietLabelsVegan.

        Diet name  # noqa: E501

        :return: The name of this BrandedFoodObjectDietLabelsVegan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BrandedFoodObjectDietLabelsVegan.

        Diet name  # noqa: E501

        :param name: The name of this BrandedFoodObjectDietLabelsVegan.
        :type name: str
        """

        self._name = name

    @property
    def is_compatible(self) -> bool:
        """Gets the is_compatible of this BrandedFoodObjectDietLabelsVegan.

        Boolean describing if this item is compatible with this diet  # noqa: E501

        :return: The is_compatible of this BrandedFoodObjectDietLabelsVegan.
        :rtype: bool
        """
        return self._is_compatible

    @is_compatible.setter
    def is_compatible(self, is_compatible: bool):
        """Sets the is_compatible of this BrandedFoodObjectDietLabelsVegan.

        Boolean describing if this item is compatible with this diet  # noqa: E501

        :param is_compatible: The is_compatible of this BrandedFoodObjectDietLabelsVegan.
        :type is_compatible: bool
        """

        self._is_compatible = is_compatible

    @property
    def compatibility_level(self) -> int:
        """Gets the compatibility_level of this BrandedFoodObjectDietLabelsVegan.

        Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility  # noqa: E501

        :return: The compatibility_level of this BrandedFoodObjectDietLabelsVegan.
        :rtype: int
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level: int):
        """Sets the compatibility_level of this BrandedFoodObjectDietLabelsVegan.

        Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility  # noqa: E501

        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietLabelsVegan.
        :type compatibility_level: int
        """

        self._compatibility_level = compatibility_level

    @property
    def confidence(self) -> int:
        """Gets the confidence of this BrandedFoodObjectDietLabelsVegan.

        Boolean that indicates if we are confident in how this item is graded for this diet  # noqa: E501

        :return: The confidence of this BrandedFoodObjectDietLabelsVegan.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: int):
        """Sets the confidence of this BrandedFoodObjectDietLabelsVegan.

        Boolean that indicates if we are confident in how this item is graded for this diet  # noqa: E501

        :param confidence: The confidence of this BrandedFoodObjectDietLabelsVegan.
        :type confidence: int
        """

        self._confidence = confidence

    @property
    def confidence_description(self) -> str:
        """Gets the confidence_description of this BrandedFoodObjectDietLabelsVegan.

        Description of our confidence that this item was graded correctly  # noqa: E501

        :return: The confidence_description of this BrandedFoodObjectDietLabelsVegan.
        :rtype: str
        """
        return self._confidence_description

    @confidence_description.setter
    def confidence_description(self, confidence_description: str):
        """Sets the confidence_description of this BrandedFoodObjectDietLabelsVegan.

        Description of our confidence that this item was graded correctly  # noqa: E501

        :param confidence_description: The confidence_description of this BrandedFoodObjectDietLabelsVegan.
        :type confidence_description: str
        """

        self._confidence_description = confidence_description
