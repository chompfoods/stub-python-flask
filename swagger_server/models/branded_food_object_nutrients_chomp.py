# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BrandedFoodObjectNutrientsChomp(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, measurement_unit: str=None, per_100g: float=None, per_serving: float=None, total: float=None):  # noqa: E501
        """BrandedFoodObjectNutrientsChomp - a model defined in Swagger

        :param name: The name of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :type name: str
        :param measurement_unit: The measurement_unit of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :type measurement_unit: str
        :param per_100g: The per_100g of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :type per_100g: float
        :param per_serving: The per_serving of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :type per_serving: float
        :param total: The total of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :type total: float
        """
        self.swagger_types = {
            'name': str,
            'measurement_unit': str,
            'per_100g': float,
            'per_serving': float,
            'total': float
        }

        self.attribute_map = {
            'name': 'name',
            'measurement_unit': 'measurement_unit',
            'per_100g': 'per_100g',
            'per_serving': 'per_serving',
            'total': 'total'
        }
        self._name = name
        self._measurement_unit = measurement_unit
        self._per_100g = per_100g
        self._per_serving = per_serving
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'BrandedFoodObjectNutrientsChomp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BrandedFoodObject_nutrients_chomp of this BrandedFoodObjectNutrientsChomp.  # noqa: E501
        :rtype: BrandedFoodObjectNutrientsChomp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this BrandedFoodObjectNutrientsChomp.

        Nutrient name  # noqa: E501

        :return: The name of this BrandedFoodObjectNutrientsChomp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BrandedFoodObjectNutrientsChomp.

        Nutrient name  # noqa: E501

        :param name: The name of this BrandedFoodObjectNutrientsChomp.
        :type name: str
        """

        self._name = name

    @property
    def measurement_unit(self) -> str:
        """Gets the measurement_unit of this BrandedFoodObjectNutrientsChomp.

        The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)  # noqa: E501

        :return: The measurement_unit of this BrandedFoodObjectNutrientsChomp.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit: str):
        """Sets the measurement_unit of this BrandedFoodObjectNutrientsChomp.

        The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)  # noqa: E501

        :param measurement_unit: The measurement_unit of this BrandedFoodObjectNutrientsChomp.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def per_100g(self) -> float:
        """Gets the per_100g of this BrandedFoodObjectNutrientsChomp.

        Amount of the nutrient per 100g of food  # noqa: E501

        :return: The per_100g of this BrandedFoodObjectNutrientsChomp.
        :rtype: float
        """
        return self._per_100g

    @per_100g.setter
    def per_100g(self, per_100g: float):
        """Sets the per_100g of this BrandedFoodObjectNutrientsChomp.

        Amount of the nutrient per 100g of food  # noqa: E501

        :param per_100g: The per_100g of this BrandedFoodObjectNutrientsChomp.
        :type per_100g: float
        """

        self._per_100g = per_100g

    @property
    def per_serving(self) -> float:
        """Gets the per_serving of this BrandedFoodObjectNutrientsChomp.

        Nutrient value per serving  # noqa: E501

        :return: The per_serving of this BrandedFoodObjectNutrientsChomp.
        :rtype: float
        """
        return self._per_serving

    @per_serving.setter
    def per_serving(self, per_serving: float):
        """Sets the per_serving of this BrandedFoodObjectNutrientsChomp.

        Nutrient value per serving  # noqa: E501

        :param per_serving: The per_serving of this BrandedFoodObjectNutrientsChomp.
        :type per_serving: float
        """

        self._per_serving = per_serving

    @property
    def total(self) -> float:
        """Gets the total of this BrandedFoodObjectNutrientsChomp.

        Total nutrient value  # noqa: E501

        :return: The total of this BrandedFoodObjectNutrientsChomp.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this BrandedFoodObjectNutrientsChomp.

        Total nutrient value  # noqa: E501

        :param total: The total of this BrandedFoodObjectNutrientsChomp.
        :type total: float
        """

        self._total = total
