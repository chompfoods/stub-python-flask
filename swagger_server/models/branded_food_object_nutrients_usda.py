# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BrandedFoodObjectNutrientsUsda(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, per_100g: float=None, measurement_unit: str=None, min: float=None, max: float=None, median: float=None, rank: int=None, data_points: int=None, footnote: str=None, description: str=None):  # noqa: E501
        """BrandedFoodObjectNutrientsUsda - a model defined in Swagger

        :param id: The id of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type id: int
        :param name: The name of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type name: str
        :param per_100g: The per_100g of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type per_100g: float
        :param measurement_unit: The measurement_unit of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type measurement_unit: str
        :param min: The min of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type min: float
        :param max: The max of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type max: float
        :param median: The median of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type median: float
        :param rank: The rank of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type rank: int
        :param data_points: The data_points of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type data_points: int
        :param footnote: The footnote of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type footnote: str
        :param description: The description of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'per_100g': float,
            'measurement_unit': str,
            'min': float,
            'max': float,
            'median': float,
            'rank': int,
            'data_points': int,
            'footnote': str,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'per_100g': 'per_100g',
            'measurement_unit': 'measurement_unit',
            'min': 'min',
            'max': 'max',
            'median': 'median',
            'rank': 'rank',
            'data_points': 'data_points',
            'footnote': 'footnote',
            'description': 'description'
        }
        self._id = id
        self._name = name
        self._per_100g = per_100g
        self._measurement_unit = measurement_unit
        self._min = min
        self._max = max
        self._median = median
        self._rank = rank
        self._data_points = data_points
        self._footnote = footnote
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'BrandedFoodObjectNutrientsUsda':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BrandedFoodObject_nutrients_usda of this BrandedFoodObjectNutrientsUsda.  # noqa: E501
        :rtype: BrandedFoodObjectNutrientsUsda
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BrandedFoodObjectNutrientsUsda.

        Nutrient ID  # noqa: E501

        :return: The id of this BrandedFoodObjectNutrientsUsda.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BrandedFoodObjectNutrientsUsda.

        Nutrient ID  # noqa: E501

        :param id: The id of this BrandedFoodObjectNutrientsUsda.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this BrandedFoodObjectNutrientsUsda.

        Nutrient name  # noqa: E501

        :return: The name of this BrandedFoodObjectNutrientsUsda.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BrandedFoodObjectNutrientsUsda.

        Nutrient name  # noqa: E501

        :param name: The name of this BrandedFoodObjectNutrientsUsda.
        :type name: str
        """

        self._name = name

    @property
    def per_100g(self) -> float:
        """Gets the per_100g of this BrandedFoodObjectNutrientsUsda.

        Amount of the nutrient per 100g of food  # noqa: E501

        :return: The per_100g of this BrandedFoodObjectNutrientsUsda.
        :rtype: float
        """
        return self._per_100g

    @per_100g.setter
    def per_100g(self, per_100g: float):
        """Sets the per_100g of this BrandedFoodObjectNutrientsUsda.

        Amount of the nutrient per 100g of food  # noqa: E501

        :param per_100g: The per_100g of this BrandedFoodObjectNutrientsUsda.
        :type per_100g: float
        """

        self._per_100g = per_100g

    @property
    def measurement_unit(self) -> str:
        """Gets the measurement_unit of this BrandedFoodObjectNutrientsUsda.

        The unit used for the measure of this nutrient  # noqa: E501

        :return: The measurement_unit of this BrandedFoodObjectNutrientsUsda.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit: str):
        """Sets the measurement_unit of this BrandedFoodObjectNutrientsUsda.

        The unit used for the measure of this nutrient  # noqa: E501

        :param measurement_unit: The measurement_unit of this BrandedFoodObjectNutrientsUsda.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def min(self) -> float:
        """Gets the min of this BrandedFoodObjectNutrientsUsda.

        Minimum nutrient value  # noqa: E501

        :return: The min of this BrandedFoodObjectNutrientsUsda.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min: float):
        """Sets the min of this BrandedFoodObjectNutrientsUsda.

        Minimum nutrient value  # noqa: E501

        :param min: The min of this BrandedFoodObjectNutrientsUsda.
        :type min: float
        """

        self._min = min

    @property
    def max(self) -> float:
        """Gets the max of this BrandedFoodObjectNutrientsUsda.

        Maximum nutrient value  # noqa: E501

        :return: The max of this BrandedFoodObjectNutrientsUsda.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max: float):
        """Sets the max of this BrandedFoodObjectNutrientsUsda.

        Maximum nutrient value  # noqa: E501

        :param max: The max of this BrandedFoodObjectNutrientsUsda.
        :type max: float
        """

        self._max = max

    @property
    def median(self) -> float:
        """Gets the median of this BrandedFoodObjectNutrientsUsda.

        Median nutrient value  # noqa: E501

        :return: The median of this BrandedFoodObjectNutrientsUsda.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median: float):
        """Sets the median of this BrandedFoodObjectNutrientsUsda.

        Median nutrient value  # noqa: E501

        :param median: The median of this BrandedFoodObjectNutrientsUsda.
        :type median: float
        """

        self._median = median

    @property
    def rank(self) -> int:
        """Gets the rank of this BrandedFoodObjectNutrientsUsda.

        Nutrient rank  # noqa: E501

        :return: The rank of this BrandedFoodObjectNutrientsUsda.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank: int):
        """Sets the rank of this BrandedFoodObjectNutrientsUsda.

        Nutrient rank  # noqa: E501

        :param rank: The rank of this BrandedFoodObjectNutrientsUsda.
        :type rank: int
        """

        self._rank = rank

    @property
    def data_points(self) -> int:
        """Gets the data_points of this BrandedFoodObjectNutrientsUsda.

        Number of observations on which the value is based  # noqa: E501

        :return: The data_points of this BrandedFoodObjectNutrientsUsda.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points: int):
        """Sets the data_points of this BrandedFoodObjectNutrientsUsda.

        Number of observations on which the value is based  # noqa: E501

        :param data_points: The data_points of this BrandedFoodObjectNutrientsUsda.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def footnote(self) -> str:
        """Gets the footnote of this BrandedFoodObjectNutrientsUsda.

        Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.  # noqa: E501

        :return: The footnote of this BrandedFoodObjectNutrientsUsda.
        :rtype: str
        """
        return self._footnote

    @footnote.setter
    def footnote(self, footnote: str):
        """Sets the footnote of this BrandedFoodObjectNutrientsUsda.

        Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.  # noqa: E501

        :param footnote: The footnote of this BrandedFoodObjectNutrientsUsda.
        :type footnote: str
        """

        self._footnote = footnote

    @property
    def description(self) -> str:
        """Gets the description of this BrandedFoodObjectNutrientsUsda.

        Description of the nutrient source  # noqa: E501

        :return: The description of this BrandedFoodObjectNutrientsUsda.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BrandedFoodObjectNutrientsUsda.

        Description of the nutrient source  # noqa: E501

        :param description: The description of this BrandedFoodObjectNutrientsUsda.
        :type description: str
        """

        self._description = description
