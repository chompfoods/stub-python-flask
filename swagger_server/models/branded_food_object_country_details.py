# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BrandedFoodObjectCountryDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, english_speaking: int=None, non_english_speaking: int=None):  # noqa: E501
        """BrandedFoodObjectCountryDetails - a model defined in Swagger

        :param english_speaking: The english_speaking of this BrandedFoodObjectCountryDetails.  # noqa: E501
        :type english_speaking: int
        :param non_english_speaking: The non_english_speaking of this BrandedFoodObjectCountryDetails.  # noqa: E501
        :type non_english_speaking: int
        """
        self.swagger_types = {
            'english_speaking': int,
            'non_english_speaking': int
        }

        self.attribute_map = {
            'english_speaking': 'english_speaking',
            'non_english_speaking': 'non_english_speaking'
        }
        self._english_speaking = english_speaking
        self._non_english_speaking = non_english_speaking

    @classmethod
    def from_dict(cls, dikt) -> 'BrandedFoodObjectCountryDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BrandedFoodObject_country_details of this BrandedFoodObjectCountryDetails.  # noqa: E501
        :rtype: BrandedFoodObjectCountryDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def english_speaking(self) -> int:
        """Gets the english_speaking of this BrandedFoodObjectCountryDetails.

        The number of countries where English is the country's primary language  # noqa: E501

        :return: The english_speaking of this BrandedFoodObjectCountryDetails.
        :rtype: int
        """
        return self._english_speaking

    @english_speaking.setter
    def english_speaking(self, english_speaking: int):
        """Sets the english_speaking of this BrandedFoodObjectCountryDetails.

        The number of countries where English is the country's primary language  # noqa: E501

        :param english_speaking: The english_speaking of this BrandedFoodObjectCountryDetails.
        :type english_speaking: int
        """

        self._english_speaking = english_speaking

    @property
    def non_english_speaking(self) -> int:
        """Gets the non_english_speaking of this BrandedFoodObjectCountryDetails.

        The number of countries where English is not the country's primary language  # noqa: E501

        :return: The non_english_speaking of this BrandedFoodObjectCountryDetails.
        :rtype: int
        """
        return self._non_english_speaking

    @non_english_speaking.setter
    def non_english_speaking(self, non_english_speaking: int):
        """Sets the non_english_speaking of this BrandedFoodObjectCountryDetails.

        The number of countries where English is not the country's primary language  # noqa: E501

        :param non_english_speaking: The non_english_speaking of this BrandedFoodObjectCountryDetails.
        :type non_english_speaking: int
        """

        self._non_english_speaking = non_english_speaking
